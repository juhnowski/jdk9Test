​
JDK-8
Default Methods in Interface https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html
package defaultmethods;
import java.time.*;
public interface TimeClient {
void setTime(int hour, int minute, int second);
void setDate(int day, int month, int year);
void setDateAndTime(int day, int month, int year,
int hour, int minute, int second);
LocalDateTime getLocalDateTime();
static ZoneId getZoneId (String zoneString) {
try {
return ZoneId.of(zoneString);
} catch (DateTimeException e) {
System.err.println("Invalid time zone: " + zoneString +
"; using default time zone instead.");
return ZoneId.systemDefault();
}
}
default ZonedDateTime getZonedDateTime(String zoneString) {
return ZonedDateTime.of(getLocalDateTime(), getZoneId(zoneString));
}
}
2. Default methods in interface - функциональный интерфейс https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html
@FunctionalInterface
interface Utilities {
default Consumer<Runnable> m() {
return (r) -> r.run();
}
//default methods
Object function(Object o);
}
class A implements Utilities {
public Object function(Object o) {
return new Object();
}
{
Consumer<Runnable> n = new A().m();
}
}
3. Lambda
//take a Long, returns a String
Function<Long,String> f = (l)->l.toString();
//takes nothing gives you Threads
Supplier<Thread> s = Thread::currentThread;
//takes a string as a parameter
Consumer<String> c = System.out::println;
new ArrayList<String>().stream().
peek(e->System.out.println(e)).
map(e->e.hashCode()).
filter(hc->(hc%2) == 0).
collect(Collectors.toCollection(TreeSet::new))
4. java.util.Optional
//create
String a;
Optional<String> optional = Optional.ofNullable(a);
//process
optional.map(s->"Opt:"+s);
//map a function that returns Optional
optional.flatMap(s->Optional.ofNullable(s));
//run if the value is there
optional.ifPresent(System.out::println);
//get the value or throw an exception
optional.get();
//return the value or the given value
optional.orElse("HelloWorld!);
//return empty Optional if not satisfy
optional.filter(s->s.startsWith("Opt"));
5 Функция как параметр
BiFunction<T, U,R> {
R apply(T t, U u);
}
// два параметра, не возвращает результат
BiConsumer<T,U> {
void accept(T t, U u)
}
// один параметр, возвращает результат
Function<T, R> {
R apply(T t);
}
// один параметр, не возвращает результат
Consumer<T> {
void accept(T t);
}
// Без параметров, возвращает результат
Supplier<T> {
T get();
}
6. CompletableFuture - средство для передачи информации между параллельными потоками исполнения. https://habrahabr.ru/post/213319/
7. Java 8 Concurrency
7.1 Runnable and Thread
Runnable task = () -> {
String threadName = Thread.currentThread().getName();
System.out.println("Hello " + threadName);
};
task.run();
Thread thread = new Thread(task);
thread.start();
System.out.println("Done!");
7.2 Sleep
Runnable runnable = () -> {
try {
String name = Thread.currentThread().getName();
System.out.println("Foo " + name);
TimeUnit.SECONDS.sleep(1);
System.out.println("Bar " + name);
}
catch (InterruptedException e) {
e.printStackTrace();
}
};
Thread thread = new Thread(runnable);
thread.start();
7.3 Executors
ExecutorService executor = Executors.newSingleThreadExecutor();
executor.submit(() -> {
String threadName = Thread.currentThread().getName();
System.out.println("Hello " + threadName);
});
7.4 Завершение таска
try {
System.out.println("attempt to shutdown executor");
executor.shutdown();
executor.awaitTermination(5, TimeUnit.SECONDS);
}
catch (InterruptedException e) {
System.err.println("tasks interrupted");
}
finally {
if (!executor.isTerminated()) {
System.err.println("cancel non-finished tasks");
}
executor.shutdownNow();
System.out.println("shutdown finished");
}
7.5 Пример программы
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.Executors;
class FutureTest {
public static void main(String[] args) {
        Callable<Integer> task = () -> {
                try {
                        TimeUnit.SECONDS.sleep(1);
                        return 123;
                }
                catch (InterruptedException e) {
                        throw new IllegalStateException("task interrupted", e);
                }
        };
        ExecutorService executor = Executors.newFixedThreadPool(1);
        Future<Integer> future = executor.submit(task);
        System.out.println("future done? " + future.isDone());
        Integer result = 0;
        try {
            result = future.get();
        } catch(InterruptedException ie) {
          ie.printStackTrace();
        } catch(Exception ex){
          ex.printStackTrace();
        }
        System.out.println("future done? " + future.isDone());
        System.out.println("result: " + result);
        System.out.println("=====================================");
}
}
7.6 Executor TimeOut
import java.util.concurrent.*;
class FutureTimeoutTest {
public static void main(String[] args) {
        ExecutorService executor = Executors.newFixedThreadPool(1);
        Future<Integer> future = executor.submit(() -> {
                        try {
                                TimeUnit.SECONDS.sleep(2);
                                return 123;
                        }
                        catch (InterruptedException e) {
                                throw new IllegalStateException("task interrupted", e);
                        }
                });
        try{
                future.get(1, TimeUnit.SECONDS);
        } catch(Exception e) {
                e.printStackTrace();
        }
}
}
7.7 Future List
import java.util.concurrent.*;
import java.util.*;
class FutureList {
public static void main(String[] args) throws InterruptedException{
        ExecutorService executor = Executors.newWorkStealingPool();
        List<Callable<String> > callables = Arrays.asList(
                () -> "task1",
                () -> "task2",
                () -> "task3");
        executor.invokeAll(callables)
        .stream()
        .map(future -> {
                        try {
                                return future.get();
                        }
                        catch (Exception e) {
                                throw new IllegalStateException(e);
                        }
                })
        .forEach(System.out::println);
}
}
7.8 Any - выполнится только task2
import java.util.concurrent.*;
import java.util.*;
class FutureAnyTest {
static Callable<String> callable(String result, long sleepSeconds) {
        return () -> {
                       TimeUnit.SECONDS.sleep(sleepSeconds);
                       return result;
        };
}
public static void main(String[] args) {
        try {
                ExecutorService executor = Executors.newWorkStealingPool();
                List<Callable<String> > callables = Arrays.asList(
                        callable("task1", 2),
                        callable("task2", 1),
                        callable("task3", 3));
                String result = executor.invokeAny(callables);
                System.out.println(result);
        } catch(Exception e) {
                e.printStackTrace();
        }
System.out.println("===========================");
}
}
7.9 Scheduled Executors
import java.util.concurrent.*;
import java.util.*;
class ScheduledExecutorTest {
public static void main(String[] args) {
        try{
                ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
                Runnable task = () -> System.out.println("Scheduling: " + System.nanoTime());
                ScheduledFuture<?> future = executor.schedule(task, 3, TimeUnit.SECONDS);
                TimeUnit.MILLISECONDS.sleep(1337);
                long remainingDelay = future.getDelay(TimeUnit.MILLISECONDS);
                System.out.printf("Remaining Delay: %sms", remainingDelay);
        } catch(Exception e) {
                e.printStackTrace();
        }
}
}
